#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# ROS
import rospy

# Robonomics
from ethereum_common.srv import Accounts, BlockNumber
from robonomics_msgs.msg import Offer, Demand

class Registrator:

    def __init__(self):
        rospy.init_node("registrator")

        rospy.wait_for_service('/eth/current_block')
        rospy.wait_for_service('/eth/accounts')
        self.accounts = rospy.ServiceProxy('/eth/accounts', Accounts)()
        rospy.loginfo(str(self.accounts))  # AIRA ethereum addresses

        rospy.Subscriber('/liability/infochan/incoming/demand', Demand, self.on_incoming_demand)

        self.signing_offer = rospy.Publisher('/liability/infochan/eth/signing/offer', Offer, queue_size=128)

        rospy.loginfo("Registrator node is launched!")

    def on_incoming_demand(self, incoming):
        rospy.loginfo('Incoming demand %s...', str(incoming))
        if (incoming.model.multihash == rospy.get_param('~model') and incoming.token.address == rospy.get_param('~token')):
            rospy.loginfo('For my model and token!')
            log_hash = incoming.objective.multihash
            res = self.check_objective(log_hash)

            if res:
                self.make_offer(incoming)
            else:
                rospy.loginfo("File {} doesn't look good or unreachable".format(log_hash))
        else:
            rospy.loginfo('It is not for my model or token, skip it.')

    def spin(self):
        rospy.spin()


if __name__ == "__main__":
    Registrator().spin()

