#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# ROS
import rospy

class Registrator:
    def __init__(self):
        rospy.init_node("registrator")
        rospy.loginfo("Launching registrator node...")

        rospy.Subscriber('/liability/ready', Liability, self.on_new_liability)

        rospy.wait_for_service('/liability/finish')

        self.liability_proxy = namedtuple('liability_srvs_proxy', ['start', 'finish'])(
                                          rospy.ServiceProxy('/liability/start', StartLiability),
                                          rospy.ServiceProxy('/liability/finish', FinishLiability))

        # For easy clean up after liability is executed
        self.publishers = []
        self.subscribers = []

        rospy.loginfo("Registrator node is launched!")

    def on_new_liability(self, liability):
        rospy.loginfo("Got new liability {}".format(liability.address))
        rospy.loginfo('Starting process...')

        prefix = '/liability/eth_' + liability.address.address

        sub = rospy.Subscriber(prefix + '/liability', String, self.liability_id)
        self.subscribers.append(sub)

        sub = rospy.Subscriber(prefix + '/log_hash', String, self.read_log)

        self.liability_proxy.start(liability.address.address)

    def liability_id(self, liability):
        pass

    def read_log(self, log_hash):
        pass

    def clean(self):
        for publisher in self.publishers:
            publisher.unregister()

        for subscriber in self.subscribers:
            subscriber.unregister()

        self.publishers = []
        self.subscribers = []

    def spin(self):
        rospy.spin()


if __name__ == "__main__":
    Registrator().spin()

